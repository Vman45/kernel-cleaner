#!/bin/bash
# Copyright megabaks
# Distributed under the terms of the GNU General Public License v3 or later

############################################################################
################ init ######################################################
init(){
SRC="/usr/src/linux"
KERNELS="$(file /boot/* | grep "Linux.*version")"
# config
[ -z "${CONFIG}" ] && CONFIG="/etc/kernel-cleaner.conf"
[ -f "${CONFIG}" ] && . "${CONFIG}"

# colors
green="\033[01;32m"
red="\033[01;31m"
restore="\033[00m"
}
############################################################################
################ kernel path and real name #################################
kernel_version() {
makefile="${SRC}-${1}/Makefile"
  if [ -f "${makefile}" ];then
	VERSION="$(awk '/^VERSION =/ {print $3}' "${makefile}")"
	PATCHLEVEL="$(awk '/^PATCHLEVEL =/ {print $3}' "${makefile}")"
	SUBLEVEL="$(awk '/^SUBLEVEL =/ {print $3}' "${makefile}")"
	EXTRAVERSION="$(awk '/^EXTRAVERSION =/ {print $3}' "${makefile}")"
	FULL_KERNEL="${VERSION}.${PATCHLEVEL}.${SUBLEVEL}${EXTRAVERSION}"
  fi
}

true_kernel() {
  if [ -n "${1}" ];then
	KERNEL="${1##*linux-}"
	KERNEL="${KERNEL%/}"
  fi

  if [ -d "${SRC}-${KERNEL}" ];then
	kernel_version ${KERNEL}
  else
	for kernel in `ls -d --color=never /usr/src/linux-*`;do
	  kernel="${kernel##*/linux-}"
	  kernel_version ${kernel}
	  if [ "${KERNEL}" == "${FULL_KERNEL}" ];then
		KERNEL="${kernel}"
		break
	  fi
	done
  fi
}
############################################################################
################ boot ######################################################
check_boot(){
while read line;do
  FILE="`awk '{print $1}' <<< "${line}"`"
  FILE="${FILE%:}"
  version="`awk '{print $9}' <<< "${line}"`"
  true_kernel ${version}

  if ! [ -f "${SRC}-${KERNEL}/Makefile" ] && ! [ -d "/lib/modules/${version}" ];then
	REMOVE_FILES+="${FILE}\n"
  fi

done <<< "${KERNELS}"
}
############################################################################
################ modules ###################################################
check_mod(){
VERSIONS="$(awk '{print $9}' <<< "${KERNELS}")"
for mod_dir in `ls -1 --color=never /lib/modules/ | grep -v "${VERSIONS}"`;do
  REMOVE_MOD_DIRS+="/lib/modules/${mod_dir}\n"
done
}
############################################################################
################ sources ###################################################
check_src(){
for src_dir in `ls -d1 --color=never ${SRC}*`;do
  [ -f "${src_dir}/Makefile" ] || REMOVE_DIRS+="${src_dir}\n"
done
}
############################################################################
################ ignore ####################################################
ignore(){
IGNORE+=" $(sed -e "s|.*--ignore||" -e "s|--.*||" <<< ${*})"

for ignor in ${IGNORE};do
  if [ -f "${ignor}" ] || [ -d "${ignor}" ] ;then
	echo -e "${green}Ignoring:${restore}\t${ignor}"
	REMOVE_FILES="${REMOVE_FILES//"${ignor}"/}"
	REMOVE_DIRS="${REMOVE_DIRS//"${ignor}"/}"
	REMOVE_MOD_DIRS="${REMOVE_MOD_DIRS//"${ignor}"/}"
  else
	echo -e "${red}Not found:${restore}\t${ignor}"
  fi
done
}
############################################################################
################ force #####################################################
force(){
FORCE+=" $(sed -e "s|.*--force||" -e "s|--.*||" <<< ${*})"

for force in ${FORCE};do
  if [ -f "${force}" ] || [ -d "${force}" ] ;then
	echo -e "${green}Forcing remove:${restore}\t${force}"
	REMOVE_FILES+="${force}\n"
	REMOVE_DIRS+="${force}\n"
  else
	echo -e "${red}Not found:${restore}\t${force}"
  fi
done
}
############################################################################
################ status ####################################################
status(){
  REMOVE_FILES="$(echo -e "${REMOVE_FILES}" | sort -u | sed '/^$/d')"
  REMOVE_DIRS="$(echo -e "${REMOVE_DIRS}" | sort -u | sed '/^$/d')"
  REMOVE_MOD_DIRS="$(echo -e "${REMOVE_MOD_DIRS}" | sort -u | sed '/^$/d')"

  echo -e "\n${green}Next files will be removed:${restore}"
  echo -e "${REMOVE_FILES}"

  echo -e "\n${green}Next directories will be removed:${restore}"
  echo -e "${REMOVE_DIRS}"
  echo -e "${REMOVE_MOD_DIRS}"
}
############################################################################
################ remove ####################################################
remove(){
  rm ${REMOVE_FILES//\\n/ }
  rm -r ${REMOVE_DIRS//\\n/ }
  rm -r ${REMOVE_MOD_DIRS//\\n/ }
}
############################################################################
################ lets go! ##################################################
if [ "${1}" == "--help" ] || [ "${1}" == "-help" ] || [ "${1}" == "-h" ] || [ "${1}" == "-?" ];then
  echo -e \
"Usage: kernel-cleaner [OPTION] [CUSTOM] [TARGET] [TARGET]â€¦
available OPTIONS:
--run:               Check and remove broken kernels.
--pretend:           Check only. Nothing remove.
--help/-help/-h/-?:  This help.

CUSTOM can be one of:
--ignore [TARGETS]:  Don't remove TARGETS.( or pass TARGETS in the /etc/kernel-cleaner.conf )
--force  [TARGETS]:  Forcing remove TARGETS.

TARGETS can be one of:
[FILE]:    example '/boot/vmlinuz-X.Y.Z'
[PATH]:    example '/usr/src/linux-3.5.6-pf/'
TARGETS must be SPACE devided."
  exit 0
fi

if [ "${1}" == "--pretend" ];then
  init;
  ignore "${*}";
  force "${*}";
  check_boot;
  check_mod;
  check_src;
  status;
  exit 0
fi

if [ "${1}" == "--run" ];then
  init;
  ignore "${*}";
  force "${*}";
  check_boot;
  check_mod;
  check_src;
  status;
  remove;
  exit 0
fi
