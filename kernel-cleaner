#!/bin/bash
# Copyright megabaks
# Distributed under the terms of the GNU General Public License v3 or later

############################################################################
################ init ######################################################
init(){

SRC="/usr/src/linux"

KERNELS="$(file -F ' ' /boot/* | awk '/Linux.*version/ {print $1,$9}')"

INITRAMS="$(file -F ' ' /boot/* | awk '/compressed data/ {print $1,$2}')"

file /boot/* | grep -q 'ASCII' && TEXT="1"
[ -n "${TEXT}" ] && CONFIGS="$(grep 'Linux/' `file /boot/* | awk '/ASCII/ {print $1}' | sed 's|:||'` | awk '{print $1,$3}')"
CONFIGS="${CONFIGS//:#/}"

file /boot/System* &>/dev/null && MAPS="1"
[ -n "${MAPS}" ] && ALL_MAPS="$(ls -1 --color=never /boot/System.map-*)"

#### config ####
[ -z "${CONFIG}" ] && CONFIG="/etc/kernel-cleaner.conf"
[ -f "${CONFIG}" ] && . "${CONFIG}"

#### colors ####
green="\033[01;32m"
red="\033[01;31m"
restore="\033[00m"
}
############################################################################
################ kernel path and real name #################################
kernel_version() {
makefile="${SRC}-${1}/Makefile"
  if [ -f "${makefile}" ];then
	VERSION="$(awk '/^VERSION =/ {print $3}' "${makefile}")"
	PATCHLEVEL="$(awk '/^PATCHLEVEL =/ {print $3}' "${makefile}")"
	SUBLEVEL="$(awk '/^SUBLEVEL =/ {print $3}' "${makefile}")"
	EXTRAVERSION="$(awk '/^EXTRAVERSION =/ {print $3}' "${makefile}")"
	FULL_KERNEL="${VERSION}.${PATCHLEVEL}.${SUBLEVEL}${EXTRAVERSION}"
  fi
}

true_kernel() {
  if [ -n "${1}" ];then
	KERNEL="${1##*linux-}"
	KERNEL="${KERNEL%/}"
  fi

  if [ -d "${SRC}-${KERNEL}" ];then
	kernel_version ${KERNEL}
  else
	for kernel in `ls -d --color=never "${SRC}"-*`;do
	  kernel="${kernel##*/linux-}"
	  kernel_version ${kernel}
	  if [ "${KERNEL}" == "${FULL_KERNEL}" ];then
		KERNEL="${kernel}"
		break
	  fi
	done
  fi
}
############################################################################
################ boot ######################################################
check_boot(){
while read file version;do
  true_kernel ${version}
  if ! [ -f "${SRC}-${KERNEL}/Makefile" ] && ! [ -d "/lib/modules/${version}" ];then
	REMOVE_FILES+="${file}\n"
#### initrams ####
	while read ram_file ram_ver;do
	  if [ "${FULL_KERNEL}" == "${ram_ver}" ];then
		REMOVE_FILES+="${ram_file}\n"
	  fi
	done <<< "${INITRAMS_FULL}"
#### configs ####
	while read conf_file conf_version;do
	  if [ "${FULL_KERNEL}" == "${conf_version}" ];then
		REMOVE_FILES+="${conf_file}\n"
	  fi
	done <<< "${CONFIGS}"
#### maps #######
	while read map_file;do
	  map_version="${map_file#*map-}"
	  if [ "${FULL_KERNEL}" == "${map_version}" ];then
		REMOVE_FILES+="${map_file}\n"
	  fi
	done <<< "${ALL_MAPS}"
  fi
done <<< "${KERNELS}"
}
############################################################################
################ initrams ##################################################
initrams(){
  while read initram compressor;do
	if [ -n "${compressor}" ];then
	  [ "${compressor}" == "gzip" ]  && decompressor="zcat"
	  [ "${compressor}" == "bzip2" ] && decompressor="bzcat"
	  [ "${compressor}" == "lzop" ]  && decompressor="lzop -c"
	  [ "${compressor}" == "XZ" ]    && decompressor="xzcat"
	  [ "${compressor}" == "LZMA" ]  && decompressor="lzcat"
	  initram_ver="$( "${decompressor}" "${initram}" | strings | awk '/^vermagic=[[:digit:]]/ {print $1}' | sort -u | sed 's|vermagic=||')"
	  INITRAMS_FULL+="${initram} ${initram_ver}\n"
	fi
  done <<< "${INITRAMS}"
}
initrams_orphans(){
  ORPHANS="${INITRAMS_FULL}"
  while read kernel_file kernel_ver;do
	while read orphan_file orphan_ver;do
	  if [ "${kernel_ver}" == "${orphan_ver}" ];then
		ORPHANS="${ORPHANS//"${orphan_file} ${orphan_ver}"/}"
	  fi
	done <<< "${INITRAMS_FULL}"
  done <<< "${KERNELS}"
  ORPHANS="$( echo -e "${ORPHANS}" | awk '{print $1}' )"
  REMOVE_FILES+="${ORPHANS}\n"
}
############################################################################
################ configs ###################################################
orphan_configs(){
  CONFIGS_ORPHANS="${CONFIGS}"
  while read config conf_ver;do
	while read kernel_file kernel_ver;do
	  if [ "${kernel_ver}" == "${conf_ver}" ];then
		CONFIGS_ORPHANS="${CONFIGS_ORPHANS//"${config} ${conf_ver}"/}"
	  fi
	done <<< "${KERNELS}"
  done <<< "${CONFIGS}"
  CONFIGS_ORPHANS="$( awk '{print $1}' <<< "${CONFIGS_ORPHANS}" )"
  REMOVE_FILES+="${CONFIGS_ORPHANS}\n"
}
############################################################################
################ System.map ################################################
orphan_maps(){
  MAPS_ORPHANS="${ALL_MAPS}"
  while read m_file;do
	m_ver="${m_file#*map-}"
	while read k_file k_ver;do
	  if [ "${k_ver}" == "${m_ver}" ];then
		MAPS_ORPHANS="${MAPS_ORPHANS/"${m_file}"/}"
	  fi
	done <<< "${KERNELS}"
  done <<< "${ALL_MAPS}"
  MAPS_ORPHANS="$( awk '{print $1}' <<< "${MAPS_ORPHANS}" )"
  REMOVE_FILES+="${MAPS_ORPHANS}\n"
}
############################################################################
################ modules ###################################################
check_mod(){
VERSIONS="$(awk '{print $2}' <<< "${KERNELS}")"
for mod_dir in `ls -1 --color=never /lib/modules/ | grep -v "${VERSIONS}"`;do
  REMOVE_MOD_DIRS+="/lib/modules/${mod_dir}\n"
done
}
############################################################################
################ sources ###################################################
check_src(){
for src_dir in `ls -d1 --color=never ${SRC}*`;do
  [ -f "${src_dir}/Makefile" ] || REMOVE_DIRS+="${src_dir}\n"
done
}
############################################################################
################ ignore ####################################################
ignore(){
IGNORE+=" $(sed -e "s|.*--ignore||" -e "s|--.*||" <<< ${*})"

for ignor in ${IGNORE};do
  if [ -f "${ignor}" ] || [ -d "${ignor}" ] ;then
	echo -e "${green}Ignoring:${restore}\t${ignor}"
	[ -f "${ignor}" ] && REMOVE_FILES="${REMOVE_FILES//"${ignor}"/}"
	[ -d "${ignor}" ] && REMOVE_DIRS="${REMOVE_DIRS//"${ignor}"/}"
	[ -d "${ignor}" ] && REMOVE_MOD_DIRS="${REMOVE_MOD_DIRS//"${ignor}"/}"
  else
	echo -e "${red}Not found:${restore}\t${ignor}"
  fi
done
}
############################################################################
################ force #####################################################
force(){
FORCE+=" $(sed -e "s|.*--force||" -e "s|--.*||" <<< ${*})"

for force in ${FORCE};do
  if [ -f "${force}" ] || [ -d "${force}" ] ;then
	echo -e "${green}Forcing remove:${restore}\t${force}"
	[ -f "${force}" ] && REMOVE_FILES+="${force}\n"
	[ -d "${force}" ] && REMOVE_DIRS+="${force}\n"
  else
	echo -e "${red}Not found:${restore}\t${force}"
  fi
done
}
############################################################################
################ status ####################################################
status(){
  REMOVE_FILES="$(echo -e "${REMOVE_FILES}" | sort -u | sed '/^$/d')"
  REMOVE_DIRS="$(echo -e "${REMOVE_DIRS}" | sort -u | sed '/^$/d')"
  REMOVE_MOD_DIRS="$(echo -e "${REMOVE_MOD_DIRS}" | sort -u | sed '/^$/d')"

  if [ -n "${REMOVE_FILES}" ] || [ -n "${REMOVE_DIRS}" ] || [ -n "${REMOVE_MOD_DIRS}" ];then
	if [ -n "${REMOVE_FILES}" ];then
	  echo -e "\n${green}Next files will be removed:${restore}"
	  echo -e "${REMOVE_FILES}"
	fi
  
	if [ -n "${REMOVE_DIRS}" ] || [ -n "${REMOVE_MOD_DIRS}" ];then
	  echo -e "\n${green}Next directories will be removed:${restore}"
	  echo -e "${REMOVE_DIRS}"
	  echo -e "${REMOVE_MOD_DIRS}"
	fi
  else
	echo -e "\n${green}Who's here? o_O${restore}\n"
  fi
}
############################################################################
################ remove ####################################################
remove(){
  [ -n "${REMOVE_FILES}" ] && rm -f  ${REMOVE_FILES//\\n/ }
  [ -n "${REMOVE_DIRS}" ] && rm -rf ${REMOVE_DIRS//\\n/ }
  [ -n "${REMOVE_MOD_DIRS}" ] && rm -rf ${REMOVE_MOD_DIRS//\\n/ }
}
############################################################################
################ lets go! ##################################################
if [ "${1}" == "--help" ] || [ "${1}" == "-help" ] || [ "${1}" == "-h" ] || [ "${1}" == "-?" ];then
  echo -e \
"Usage: kernel-cleaner [OPTION] [CUSTOM] [TARGET] [TARGET]â€¦
available OPTIONS:
--run:               Check and remove broken kernels/sources/modules/initrams/configs.
--pretend:           Check only. Nothing remove.
--help/-help/-h/-?:  This help.

CUSTOM can be one of:
--ignore [TARGETS]:  Don't remove TARGETS.( or pass TARGETS in the /etc/kernel-cleaner.conf )
--force  [TARGETS]:  Forcing remove TARGETS.

TARGETS can be one of:
[FILE]:    example '/boot/vmlinuz-X.Y.Z'
[PATH]:    example '/usr/src/linux-3.5.6-pf/'
TARGETS must be SPACE devided."
  exit 0
fi

if [ "${1}" == "--pretend" ];then
  init;
  check_boot;
  initrams;
  initrams_orphans;
  orphan_configs;
  orphan_maps;
  check_mod;
  check_src;
  ignore "${*}";
  force "${*}";
  status;
  exit 0
fi

if [ "${1}" == "--run" ];then
  init;
  check_boot;
  initrams;
  initrams_orphans;
  orphan_configs;
  orphan_maps;
  check_mod;
  check_src;
  ignore "${*}";
  force "${*}";
  status;
  remove;
  exit 0
fi
